---
- name: Ensure the backup has required parameters
  fail:
    msg: "Could not find Pantheon Backup, or missing required parameters"
  when:
    - _backup.source | default('') == ''
    - _backup.env | default('') == ''
    - _backup.mount | default('') == ''
    - _backup.remotes | default([]) | length < 1

- debug: var=_backup
  when:
    - platformsh_backup.debug | default(false) == true

- name: Check if the source configuration exists
  fail:
    msg: "Could not find source configuration {{ _backup.source }}"
  when:
    - platformsh_backup.sources[_backup.source] is not defined

- name: Get the source configuration
  set_fact:
    _source: "{{ platformsh_backup.sources[_backup.source] }}"

- name: Check if the CLI token is specified
  fail:
    msg: "Could not find CLI token for {{ _backup.source }}"
  when:
    - _source.cliTokenFile is not defined
    - _source.cliToken is not defined

- name: Check if the SSH keys are provided
  fail:
    msg: "Could not find SSH keys for {{ _backup.source }}"
  when:
    - _source.keyFile is not defined
    - _source.pubKeyFile is not defined

- name: Get the Platform SSH pipe connection string
  shell: >
    {{ platformsh_backup.cliPath | default('platform') }}
    --project={{ _source.project }}
    --environment={{ _backup.env | default('master') }}
    ssh --pipe
  register: _platformsh_backup_ssh_pipe
  until: _platformsh_backup_ssh_pipe.rc == 0
  retries: "{{ _source.retryCount | default(3) }}"
  delay: "{{ _source.retryDelay | default(30) }}"
  no_log: "{{ platformsh_backup.debug | default(false) | ternary(false, true) }}"
  environment:
    PLATFORMSH_CLI_TOKEN: "\
      {% if _source.cliTokenFile is defined %}\
      {{ lookup('file', _source.cliTokenFile) }}\
      {% else %}\
      {{ _source.cliToken }}\
      {% endif %}"
      
- debug: var=_platformsh_backup_ssh_pipe
  when:
    - platformsh_backup.debug | default(false) == true
      
- name: Create a tempfile for the rclone config
  tempfile:
    prefix: "platformsh-backup-files-"
    suffix: ".conf"
    state: file
  register: _rclone_conf
  
- name: Template the rclone conf
  copy:
    content: |
      [source]
      type = sftp
      host = {{ _platformsh_backup_ssh_pipe.stdout | split('@') | last }}
      user = {{ _platformsh_backup_ssh_pipe.stdout | split('@') | first }}
      key_file = {{ _source.keyFile }}
      copy_links = false
      links = false
      skip_links = true
      no_check_updated = true
      case_sensitive = true
      case_insensitive = false

      {% for _target in _backup.targets %}
      {% set _remote = platformsh_backup.remotes[_target.remote] %}
      {% if _remote.type | default('') == 's3' %}
      [{{ _target.remote | regex_replace('[^A-Za-z0-9]', '-') }}]
      type = s3
      provider = {{ _remote.provider | default('AWS') }}
      env_auth = false
      access_key_id = {% if _remote.accessKeyFile is defined %}{{ lookup('file', _remote.accessKeyFile) }}{% else %}{{ _remote.accessKey | default(omit) }}{% endif %}{{ ' ' }}
      secret_access_key = {% if _remote.secretKeyFile is defined %}{{ lookup('file', _remote.secretKeyFile) }}{% else %}{{ _remote.secretKey | default(omit) }}{% endif %}{{ ' ' }}
      endpoint = {{ _remote.endpoint | default('') | regex_replace('[A-z]*://', '') }}
      region = {{ _remote.region | default('') }}
      acl = {{ _remote.acl | default('private') }}
      
      {% elif _remote.type | default('') == 'sftp' %}
      [{{ _target.remote | regex_replace('[^A-Za-z0-9]', '-') }}]
      type = sftp
      host = {{ _remote.host }}
      user = {{ _remote.user }}
      key_file = {{ _remote.keyFile }}
      copy_links = false
      links = false
      skip_links = true
      no_check_updated = true
      case_sensitive = true
      case_insensitive = false
      
      {% endif %}
      {% endfor %}
    dest: "{{ _rclone_conf.path }}"

- debug: 
    msg: "{{ lookup('file', _rclone_conf.path) }}"
  when:
    - platformsh_backup.debug | default(false) == true

- name: Sync files using rclone
  shell: >
    rclone sync
    source:{{ _backup.mount }}
    {{ _target.remote | regex_replace('[^A-Za-z0-9]', '-') }}:{% if _remote.bucket is defined %}{{ _remote.bucket }}/{% endif %}{{ _target.path | default('') }}
    --config="{{ _rclone_conf.path }}"
    {% for _exclude in _backup.excludes | default([]) %}
    --exclude="{{ _exclude }}"{{ '' }}
    {% endfor %}
    {% if _backup.delete | default(true) %}
    --delete-during
    {% endif %}
    {% if (platformsh_backup.debug | default(false)) != true %}
    --quiet
    {% else %}
    --verbose="4"
    {% endif %}
  loop: "{{ _backup.targets | default([]) }}"                                         
  loop_control:                                                                            
    label: "{{ _target.remote }}"
    loop_var: _target
  when:
    - _target.disabled | default(false) == false
  vars:
    _remote: "{{ platformsh_backup.remotes[_target.remote] }}"
  register: _platformsh_backup_rclone_sync
  until: _platformsh_backup_rclone_sync.rc == 0
  retries: "{{ _source.retryCount | default(3) }}"
  delay: "{{ _source.retryDelay | default(30) }}"
  no_log: "{{ platformsh_backup.debug | default(false) | ternary(false, true) }}"
  
- name: Delete the rclone.conf
  file:
    path: "{{ _rclone_conf.path }}"
    state: absent
  
- include_tasks: "httpPing.yml"

